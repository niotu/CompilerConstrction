// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 16.10.2025 17:01:07
// Input file <Grammar.y - 16.10.2025 17:00:44>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using OCompiler.Lexer;

namespace OCompiler.Parser
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,REAL_LITERAL=6,
    BOOLEAN_LITERAL=7,CLASS=8,ELSE=9,END=10,EXTENDS=11,IF=12,
    IS=13,LOOP=14,METHOD=15,RETURN=16,THEN=17,THIS=18,
    VAR=19,WHILE=20,ASSIGN=21,ARROW=22,COLON=23,DOT=24,
    COMMA=25,LPAREN=26,RPAREN=27,LBRACKET=28,RBRACKET=29,COMMENT=30,
    UNKNOWN=31};

public struct ValueType
#line 5 "Grammar.y"
       {
    public string str;
    public int integer;
    public double real;
    public bool boolean;
    public object ast;
}
#line default
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[62];
  private static State[] states = new State[104];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "ClassDeclarations", "ClassDeclaration", "ClassName", 
      "Extension", "ClassBody", "Generic", "MemberDeclaration", "VariableDeclaration", 
      "MethodDeclaration", "ConstructorDeclaration", "Expression", "MethodHeader", 
      "OptionalMethodBody", "MethodBody", "OptionalParameters", "ReturnType", 
      "Parameters", "Body", "ParameterDeclarations", "ParameterDeclaration", 
      "Statement", "Assignment", "WhileLoop", "IfStatement", "ReturnStatement", 
      "ElsePart", "ReturningExpression", "Primary", "ConstructorInvocation", 
      "FunctionalCall", "ExpressionDotSequence", "Arguments", "ExpressionCommaSequence", 
      };
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner)
    {
       
    }
  static Parser() {
    states[0] = new State(new int[]{8,7},new int[]{-1,1,-3,3,-4,5});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{8,7,3,-3},new int[]{-3,6,-4,5});
    states[6] = new State(-4);
    states[7] = new State(new int[]{4,39},new int[]{-5,8});
    states[8] = new State(new int[]{11,102,13,-9},new int[]{-6,9});
    states[9] = new State(new int[]{13,10});
    states[10] = new State(new int[]{19,16,15,80,18,97},new int[]{-7,11,-9,13,-10,15,-11,46,-14,47,-12,96});
    states[11] = new State(new int[]{10,12});
    states[12] = new State(-5);
    states[13] = new State(new int[]{19,16,15,80,18,97,10,-11},new int[]{-7,14,-9,13,-10,15,-11,46,-14,47,-12,96});
    states[14] = new State(-12);
    states[15] = new State(-13);
    states[16] = new State(new int[]{4,17});
    states[17] = new State(new int[]{23,18});
    states[18] = new State(new int[]{5,32,6,33,7,34,18,35,4,39},new int[]{-13,19,-30,31,-31,36,-5,37,-32,44,-33,45});
    states[19] = new State(new int[]{24,21,26,24,19,-16,15,-16,18,-16,10,-16,9,-16},new int[]{-34,20});
    states[20] = new State(-53);
    states[21] = new State(new int[]{5,32,6,33,7,34,18,35,4,39},new int[]{-33,22,-13,23,-30,31,-31,36,-5,37,-32,44});
    states[22] = new State(-49);
    states[23] = new State(new int[]{24,21,26,24,19,-50,15,-50,18,-50,10,-50,9,-50,14,-50,17,-50},new int[]{-34,20});
    states[24] = new State(new int[]{27,25,5,32,6,33,7,34,18,35,4,39},new int[]{-35,26,-13,28,-30,31,-31,36,-5,37,-32,44,-33,45});
    states[25] = new State(-54);
    states[26] = new State(new int[]{27,27});
    states[27] = new State(-55);
    states[28] = new State(new int[]{24,29,26,24,27,-50},new int[]{-34,20});
    states[29] = new State(new int[]{5,32,6,33,7,34,18,35,4,39},new int[]{-33,22,-35,30,-13,28,-30,31,-31,36,-5,37,-32,44});
    states[30] = new State(-57);
    states[31] = new State(-46);
    states[32] = new State(-58);
    states[33] = new State(-59);
    states[34] = new State(-60);
    states[35] = new State(-61);
    states[36] = new State(-47);
    states[37] = new State(new int[]{26,24},new int[]{-34,38});
    states[38] = new State(-52);
    states[39] = new State(new int[]{28,41,11,-7,13,-7,26,-7,29,-7,25,-7,27,-7},new int[]{-8,40});
    states[40] = new State(-6);
    states[41] = new State(new int[]{4,39},new int[]{-5,42});
    states[42] = new State(new int[]{29,43});
    states[43] = new State(-8);
    states[44] = new State(-48);
    states[45] = new State(-49);
    states[46] = new State(-14);
    states[47] = new State(new int[]{13,50,22,78,19,-18,15,-18,18,-18,10,-18},new int[]{-15,48,-16,49});
    states[48] = new State(-17);
    states[49] = new State(-19);
    states[50] = new State(new int[]{19,16,4,56,20,60,12,66,16,75},new int[]{-20,51,-10,53,-23,54,-24,55,-25,59,-26,65,-27,74});
    states[51] = new State(new int[]{10,52});
    states[52] = new State(-25);
    states[53] = new State(-31);
    states[54] = new State(-32);
    states[55] = new State(-34);
    states[56] = new State(new int[]{21,57});
    states[57] = new State(new int[]{5,32,6,33,7,34,18,35,4,39},new int[]{-13,58,-30,31,-31,36,-5,37,-32,44,-33,45});
    states[58] = new State(new int[]{24,21,26,24,10,-38,9,-38},new int[]{-34,20});
    states[59] = new State(-35);
    states[60] = new State(new int[]{5,32,6,33,7,34,18,35,4,39},new int[]{-13,61,-30,31,-31,36,-5,37,-32,44,-33,45});
    states[61] = new State(new int[]{14,62,24,21,26,24},new int[]{-34,20});
    states[62] = new State(new int[]{19,16,4,56,20,60,12,66,16,75},new int[]{-20,63,-10,53,-23,54,-24,55,-25,59,-26,65,-27,74});
    states[63] = new State(new int[]{10,64});
    states[64] = new State(-39);
    states[65] = new State(-36);
    states[66] = new State(new int[]{5,32,6,33,7,34,18,35,4,39},new int[]{-13,67,-30,31,-31,36,-5,37,-32,44,-33,45});
    states[67] = new State(new int[]{17,68,24,21,26,24},new int[]{-34,20});
    states[68] = new State(new int[]{19,16,4,56,20,60,12,66,16,75},new int[]{-20,69,-10,53,-23,54,-24,55,-25,59,-26,65,-27,74});
    states[69] = new State(new int[]{9,72,10,-41},new int[]{-28,70});
    states[70] = new State(new int[]{10,71});
    states[71] = new State(-40);
    states[72] = new State(new int[]{19,16,4,56,20,60,12,66,16,75},new int[]{-20,73,-10,53,-23,54,-24,55,-25,59,-26,65,-27,74});
    states[73] = new State(-42);
    states[74] = new State(-37);
    states[75] = new State(new int[]{5,32,6,33,7,34,18,35,4,39,10,-44,9,-44},new int[]{-29,76,-13,77,-30,31,-31,36,-5,37,-32,44,-33,45});
    states[76] = new State(-43);
    states[77] = new State(new int[]{24,21,26,24,10,-45,9,-45},new int[]{-34,20});
    states[78] = new State(new int[]{5,32,6,33,7,34,18,35,4,39},new int[]{-13,79,-30,31,-31,36,-5,37,-32,44,-33,45});
    states[79] = new State(new int[]{24,21,26,24,19,-26,15,-26,18,-26,10,-26},new int[]{-34,20});
    states[80] = new State(new int[]{4,81});
    states[81] = new State(new int[]{26,87,23,-21,13,-21,22,-21,19,-21,15,-21,18,-21,10,-21},new int[]{-17,82,-19,86});
    states[82] = new State(new int[]{23,84,13,-23,22,-23,19,-23,15,-23,18,-23,10,-23},new int[]{-18,83});
    states[83] = new State(-20);
    states[84] = new State(new int[]{4,85});
    states[85] = new State(-24);
    states[86] = new State(-22);
    states[87] = new State(new int[]{4,93},new int[]{-21,88,-22,90});
    states[88] = new State(new int[]{27,89});
    states[89] = new State(-27);
    states[90] = new State(new int[]{25,91,27,-28});
    states[91] = new State(new int[]{4,93},new int[]{-21,92,-22,90});
    states[92] = new State(-29);
    states[93] = new State(new int[]{23,94});
    states[94] = new State(new int[]{4,39},new int[]{-5,95});
    states[95] = new State(-30);
    states[96] = new State(-15);
    states[97] = new State(new int[]{26,87,13,-21},new int[]{-17,98,-19,86});
    states[98] = new State(new int[]{13,99});
    states[99] = new State(new int[]{19,16,4,56,20,60,12,66,16,75},new int[]{-20,100,-10,53,-23,54,-24,55,-25,59,-26,65,-27,74});
    states[100] = new State(new int[]{10,101});
    states[101] = new State(-33);
    states[102] = new State(new int[]{4,103});
    states[103] = new State(-10);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-4,-3});
    rules[5] = new Rule(-4, new int[]{8,-5,-6,13,-7,10});
    rules[6] = new Rule(-5, new int[]{4,-8});
    rules[7] = new Rule(-8, new int[]{});
    rules[8] = new Rule(-8, new int[]{28,-5,29});
    rules[9] = new Rule(-6, new int[]{});
    rules[10] = new Rule(-6, new int[]{11,4});
    rules[11] = new Rule(-7, new int[]{-9});
    rules[12] = new Rule(-7, new int[]{-9,-7});
    rules[13] = new Rule(-9, new int[]{-10});
    rules[14] = new Rule(-9, new int[]{-11});
    rules[15] = new Rule(-9, new int[]{-12});
    rules[16] = new Rule(-10, new int[]{19,4,23,-13});
    rules[17] = new Rule(-11, new int[]{-14,-15});
    rules[18] = new Rule(-15, new int[]{});
    rules[19] = new Rule(-15, new int[]{-16});
    rules[20] = new Rule(-14, new int[]{15,4,-17,-18});
    rules[21] = new Rule(-17, new int[]{});
    rules[22] = new Rule(-17, new int[]{-19});
    rules[23] = new Rule(-18, new int[]{});
    rules[24] = new Rule(-18, new int[]{23,4});
    rules[25] = new Rule(-16, new int[]{13,-20,10});
    rules[26] = new Rule(-16, new int[]{22,-13});
    rules[27] = new Rule(-19, new int[]{26,-21,27});
    rules[28] = new Rule(-21, new int[]{-22});
    rules[29] = new Rule(-21, new int[]{-22,25,-21});
    rules[30] = new Rule(-22, new int[]{4,23,-5});
    rules[31] = new Rule(-20, new int[]{-10});
    rules[32] = new Rule(-20, new int[]{-23});
    rules[33] = new Rule(-12, new int[]{18,-17,13,-20,10});
    rules[34] = new Rule(-23, new int[]{-24});
    rules[35] = new Rule(-23, new int[]{-25});
    rules[36] = new Rule(-23, new int[]{-26});
    rules[37] = new Rule(-23, new int[]{-27});
    rules[38] = new Rule(-24, new int[]{4,21,-13});
    rules[39] = new Rule(-25, new int[]{20,-13,14,-20,10});
    rules[40] = new Rule(-26, new int[]{12,-13,17,-20,-28,10});
    rules[41] = new Rule(-28, new int[]{});
    rules[42] = new Rule(-28, new int[]{9,-20});
    rules[43] = new Rule(-27, new int[]{16,-29});
    rules[44] = new Rule(-29, new int[]{});
    rules[45] = new Rule(-29, new int[]{-13});
    rules[46] = new Rule(-13, new int[]{-30});
    rules[47] = new Rule(-13, new int[]{-31});
    rules[48] = new Rule(-13, new int[]{-32});
    rules[49] = new Rule(-13, new int[]{-33});
    rules[50] = new Rule(-33, new int[]{-13});
    rules[51] = new Rule(-33, new int[]{-13,24,-33});
    rules[52] = new Rule(-31, new int[]{-5,-34});
    rules[53] = new Rule(-32, new int[]{-13,-34});
    rules[54] = new Rule(-34, new int[]{26,27});
    rules[55] = new Rule(-34, new int[]{26,-35,27});
    rules[56] = new Rule(-35, new int[]{-13});
    rules[57] = new Rule(-35, new int[]{-13,24,-35});
    rules[58] = new Rule(-30, new int[]{5});
    rules[59] = new Rule(-30, new int[]{6});
    rules[60] = new Rule(-30, new int[]{7});
    rules[61] = new Rule(-30, new int[]{18});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> ClassDeclarations, EOF
#line 64 "Grammar.y"
    { 
        CurrentSemanticValue.ast = new ProgramNode((List<ClassDeclaration>)ValueStack[ValueStack.Depth-2].ast); 
    }
#line default
        break;
      case 3: // ClassDeclarations -> ClassDeclaration
#line 71 "Grammar.y"
    { 
        CurrentSemanticValue.ast = new List<ClassDeclaration> { (ClassDeclaration)ValueStack[ValueStack.Depth-1].ast }; 
    }
#line default
        break;
      case 4: // ClassDeclarations -> ClassDeclaration, ClassDeclarations
#line 75 "Grammar.y"
    { 
        var list = (List<ClassDeclaration>)ValueStack[ValueStack.Depth-1].ast;
        list.Insert(0, (ClassDeclaration)ValueStack[ValueStack.Depth-2].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 5: // ClassDeclaration -> CLASS, ClassName, Extension, IS, ClassBody, END
#line 84 "Grammar.y"
    { 
        CurrentSemanticValue.ast = new ClassDeclaration((string)ValueStack[ValueStack.Depth-5].str, (string)ValueStack[ValueStack.Depth-4].str, (List<MemberDeclaration>)ValueStack[ValueStack.Depth-2].ast);
    }
#line default
        break;
      case 6: // ClassName -> IDENTIFIER, Generic
#line 91 "Grammar.y"
    {
        CurrentSemanticValue.str = ValueStack[ValueStack.Depth-2].str; 
    }
#line default
        break;
      case 7: // Generic -> /* empty */
#line 98 "Grammar.y"
    {
        CurrentSemanticValue.str = null;
    }
#line default
        break;
      case 8: // Generic -> LBRACKET, ClassName, RBRACKET
#line 102 "Grammar.y"
    {
        CurrentSemanticValue.str = ValueStack[ValueStack.Depth-2].str;
    }
#line default
        break;
      case 9: // Extension -> /* empty */
#line 109 "Grammar.y"
    {
        CurrentSemanticValue.str = null;
    }
#line default
        break;
      case 10: // Extension -> EXTENDS, IDENTIFIER
#line 113 "Grammar.y"
    {
        CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;
    }
#line default
        break;
      case 11: // ClassBody -> MemberDeclaration
#line 120 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<MemberDeclaration> { (MemberDeclaration)ValueStack[ValueStack.Depth-1].ast };
    }
#line default
        break;
      case 12: // ClassBody -> MemberDeclaration, ClassBody
#line 124 "Grammar.y"
    {
        var list = (List<MemberDeclaration>)ValueStack[ValueStack.Depth-1].ast;
        list.Insert(0, (MemberDeclaration)ValueStack[ValueStack.Depth-2].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 13: // MemberDeclaration -> VariableDeclaration
#line 133 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 14: // MemberDeclaration -> MethodDeclaration
#line 137 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 15: // MemberDeclaration -> ConstructorDeclaration
#line 141 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 16: // VariableDeclaration -> VAR, IDENTIFIER, COLON, Expression
#line 148 "Grammar.y"
    {
        CurrentSemanticValue.ast = new VariableDeclaration((string)ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 17: // MethodDeclaration -> MethodHeader, OptionalMethodBody
#line 155 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MethodDeclaration((MethodHeaderNode)ValueStack[ValueStack.Depth-2].ast, (MethodBodyNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 18: // OptionalMethodBody -> /* empty */
#line 162 "Grammar.y"
    {
        CurrentSemanticValue.ast = null;
    }
#line default
        break;
      case 19: // OptionalMethodBody -> MethodBody
#line 166 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 20: // MethodHeader -> METHOD, IDENTIFIER, OptionalParameters, ReturnType
#line 173 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MethodHeaderNode((string)ValueStack[ValueStack.Depth-3].str, (List<ParameterDeclaration>)ValueStack[ValueStack.Depth-2].ast, (string)ValueStack[ValueStack.Depth-1].str);
    }
#line default
        break;
      case 21: // OptionalParameters -> /* empty */
#line 180 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ParameterDeclaration>();
    }
#line default
        break;
      case 22: // OptionalParameters -> Parameters
#line 184 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 23: // ReturnType -> /* empty */
#line 191 "Grammar.y"
    {
        CurrentSemanticValue.str = null;
    }
#line default
        break;
      case 24: // ReturnType -> COLON, IDENTIFIER
#line 195 "Grammar.y"
    {
        CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;
    }
#line default
        break;
      case 25: // MethodBody -> IS, Body, END
#line 202 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-2].ast;
    }
#line default
        break;
      case 26: // MethodBody -> ARROW, Expression
#line 206 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 27: // Parameters -> LPAREN, ParameterDeclarations, RPAREN
#line 213 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-2].ast;
    }
#line default
        break;
      case 28: // ParameterDeclarations -> ParameterDeclaration
#line 220 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ParameterDeclaration>{ (ParameterDeclaration)ValueStack[ValueStack.Depth-1].ast };
    }
#line default
        break;
      case 29: // ParameterDeclarations -> ParameterDeclaration, COMMA, ParameterDeclarations
#line 224 "Grammar.y"
    {
        var list = (List<ParameterDeclaration>)ValueStack[ValueStack.Depth-1].ast;
        list.Insert(0, (ParameterDeclaration)ValueStack[ValueStack.Depth-3].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 30: // ParameterDeclaration -> IDENTIFIER, COLON, ClassName
#line 233 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ParameterDeclaration((string)ValueStack[ValueStack.Depth-3].str, (string)ValueStack[ValueStack.Depth-1].str);
    }
#line default
        break;
      case 31: // Body -> VariableDeclaration
#line 240 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<Statement>{ (Statement)ValueStack[ValueStack.Depth-1].ast };
    }
#line default
        break;
      case 32: // Body -> Statement
#line 244 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<Statement>{ (Statement)ValueStack[ValueStack.Depth-1].ast };
    }
#line default
        break;
      case 33: // ConstructorDeclaration -> THIS, OptionalParameters, IS, Body, END
#line 251 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ConstructorDeclaration((List<ParameterDeclaration>)ValueStack[ValueStack.Depth-4].ast, (List<Statement>)ValueStack[ValueStack.Depth-2].ast);
    }
#line default
        break;
      case 34: // Statement -> Assignment
#line 258 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 35: // Statement -> WhileLoop
#line 262 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 36: // Statement -> IfStatement
#line 266 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 37: // Statement -> ReturnStatement
#line 270 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 38: // Assignment -> IDENTIFIER, ASSIGN, Expression
#line 277 "Grammar.y"
    {
        CurrentSemanticValue.ast = new Assignment((string)ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 39: // WhileLoop -> WHILE, Expression, LOOP, Body, END
#line 284 "Grammar.y"
    {
        CurrentSemanticValue.ast = new WhileLoop((ExpressionNode)ValueStack[ValueStack.Depth-4].ast, (List<Statement>)ValueStack[ValueStack.Depth-2].ast);
    }
#line default
        break;
      case 40: // IfStatement -> IF, Expression, THEN, Body, ElsePart, END
#line 291 "Grammar.y"
    {
        CurrentSemanticValue.ast = new IfStatement((ExpressionNode)ValueStack[ValueStack.Depth-5].ast, (List<Statement>)ValueStack[ValueStack.Depth-3].ast, (ElsePart)ValueStack[ValueStack.Depth-2].ast);
    }
#line default
        break;
      case 41: // ElsePart -> /* empty */
#line 298 "Grammar.y"
    {
        CurrentSemanticValue.ast = null;
    }
#line default
        break;
      case 42: // ElsePart -> ELSE, Body
#line 302 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ElsePart((List<Statement>)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 43: // ReturnStatement -> RETURN, ReturningExpression
#line 309 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ReturnStatement((ExpressionNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 44: // ReturningExpression -> /* empty */
#line 316 "Grammar.y"
    {
        CurrentSemanticValue.ast = null;
    }
#line default
        break;
      case 45: // ReturningExpression -> Expression
#line 320 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 46: // Expression -> Primary
#line 327 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 47: // Expression -> ConstructorInvocation
#line 331 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 48: // Expression -> FunctionalCall
#line 335 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 49: // Expression -> ExpressionDotSequence
#line 339 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 50: // ExpressionDotSequence -> Expression
#line 346 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ExpressionDotSequence(new List<ExpressionNode>{ (ExpressionNode)ValueStack[ValueStack.Depth-1].ast });
    }
#line default
        break;
      case 51: // ExpressionDotSequence -> Expression, DOT, ExpressionDotSequence
#line 350 "Grammar.y"
    {
        var list = (ExpressionDotSequence)ValueStack[ValueStack.Depth-1].ast;
        list.Expressions.Insert(0, (ExpressionNode)ValueStack[ValueStack.Depth-3].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 52: // ConstructorInvocation -> ClassName, Arguments
#line 359 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ConstructorInvocation((string)ValueStack[ValueStack.Depth-2].str, (List<ExpressionNode>)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 53: // FunctionalCall -> Expression, Arguments
#line 366 "Grammar.y"
    {
        CurrentSemanticValue.ast = new FunctionalCall((ExpressionNode)ValueStack[ValueStack.Depth-2].ast, (List<ExpressionNode>)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 54: // Arguments -> LPAREN, RPAREN
#line 373 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ExpressionNode>();
    }
#line default
        break;
      case 55: // Arguments -> LPAREN, ExpressionCommaSequence, RPAREN
#line 377 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-2].ast;
    }
#line default
        break;
      case 56: // ExpressionCommaSequence -> Expression
#line 384 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ExpressionNode>{ (ExpressionNode)ValueStack[ValueStack.Depth-1].ast };
    }
#line default
        break;
      case 57: // ExpressionCommaSequence -> Expression, DOT, ExpressionCommaSequence
#line 388 "Grammar.y"
    {
        var list = (List<ExpressionNode>)ValueStack[ValueStack.Depth-1].ast;
        list.Insert(0, (ExpressionNode)ValueStack[ValueStack.Depth-3].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 58: // Primary -> INTEGER_LITERAL
#line 397 "Grammar.y"
    {
        CurrentSemanticValue.ast = new IntegerLiteral((int)ValueStack[ValueStack.Depth-1].integer);
    }
#line default
        break;
      case 59: // Primary -> REAL_LITERAL
#line 401 "Grammar.y"
    {
        CurrentSemanticValue.ast = new RealLiteral((double)ValueStack[ValueStack.Depth-1].real);
    }
#line default
        break;
      case 60: // Primary -> BOOLEAN_LITERAL
#line 405 "Grammar.y"
    {
        CurrentSemanticValue.ast = new BooleanLiteral((bool)ValueStack[ValueStack.Depth-1].boolean);
    }
#line default
        break;
      case 61: // Primary -> THIS
#line 409 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ThisExpression();
    }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 416 "Grammar.y"
#line default
}
}
