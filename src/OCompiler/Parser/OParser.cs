// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.3
// DateTime: 22.10.2025 15:34:29
// Input file <Grammar.y - 22.10.2025 15:34:17>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using OCompiler.Lexer;

namespace OCompiler.Parser
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,REAL_LITERAL=6,
    BOOLEAN_LITERAL=7,CLASS=8,ELSE=9,END=10,EXTENDS=11,IF=12,
    IS=13,LOOP=14,METHOD=15,RETURN=16,THEN=17,THIS=18,
    VAR=19,WHILE=20,ASSIGN=21,ARROW=22,COLON=23,DOT=24,
    COMMA=25,LPAREN=26,RPAREN=27,LBRACKET=28,RBRACKET=29,COMMENT=30,
    UNKNOWN=31};

public struct ValueType
#line 5 "Grammar.y"
       {
    public string str;
    public int integer;
    public double real;
    public bool boolean;
    public object ast;
}
#line default
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.3")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
        public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) 
    { 
    }
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[74];
  private static State[] states = new State[115];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "ClassDeclarations", "ClassDeclaration", "ClassName", 
      "Extension", "ClassBody", "Generic", "MemberDeclaration", "VariableDeclaration", 
      "MethodDeclaration", "ConstructorDeclaration", "Expression", "MethodHeader", 
      "OptionalMethodBody", "MethodBody", "OptionalParameters", "ReturnType", 
      "Parameters", "Body", "ParameterDeclarations", "ParameterDeclaration", 
      "BodyElement", "Statement", "Assignment", "WhileLoop", "IfStatement", "ReturnStatement", 
      "ElsePart", "ReturningExpression", "Primary", "ConstructorInvocation", 
      "FunctionalCall", "MemberAccess", "ExpressionDotSequence", "Arguments", 
      "ExpressionCommaSequence", };

  static Parser() {
    states[0] = new State(new int[]{8,7},new int[]{-1,1,-3,3,-4,5});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{8,7,3,-3},new int[]{-3,6,-4,5});
    states[6] = new State(-4);
    states[7] = new State(new int[]{4,33},new int[]{-5,8});
    states[8] = new State(new int[]{11,113,13,-9},new int[]{-6,9});
    states[9] = new State(new int[]{13,10});
    states[10] = new State(new int[]{19,16,15,91,18,108},new int[]{-7,11,-9,13,-10,15,-11,54,-14,55,-12,107});
    states[11] = new State(new int[]{10,12});
    states[12] = new State(-5);
    states[13] = new State(new int[]{19,16,15,91,18,108,10,-11},new int[]{-7,14,-9,13,-10,15,-11,54,-14,55,-12,107});
    states[14] = new State(-12);
    states[15] = new State(-13);
    states[16] = new State(new int[]{4,17});
    states[17] = new State(new int[]{23,18});
    states[18] = new State(new int[]{5,23,6,24,7,25,18,26,4,27},new int[]{-13,19,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[19] = new State(new int[]{24,20,19,-16,15,-16,18,-16,10,-16,4,-16,20,-16,12,-16,16,-16,5,-16,6,-16,7,-16,9,-16});
    states[20] = new State(new int[]{4,21});
    states[21] = new State(-56);
    states[22] = new State(-51);
    states[23] = new State(-69);
    states[24] = new State(-70);
    states[25] = new State(-71);
    states[26] = new State(-72);
    states[27] = new State(new int[]{28,30,26,34,24,-73,19,-73,15,-73,18,-73,10,-73,4,-73,20,-73,12,-73,16,-73,5,-73,6,-73,7,-73,9,-73,25,-73,27,-73,14,-73,17,-73},new int[]{-8,28,-36,29});
    states[28] = new State(-6);
    states[29] = new State(-64);
    states[30] = new State(new int[]{4,33},new int[]{-5,31});
    states[31] = new State(new int[]{29,32});
    states[32] = new State(-8);
    states[33] = new State(new int[]{28,30,11,-7,13,-7,29,-7,25,-7,27,-7},new int[]{-8,28});
    states[34] = new State(new int[]{27,35,5,23,6,24,7,25,18,26,4,27},new int[]{-37,36,-13,38,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[35] = new State(-65);
    states[36] = new State(new int[]{27,37});
    states[37] = new State(-66);
    states[38] = new State(new int[]{24,20,25,39,27,-67});
    states[39] = new State(new int[]{5,23,6,24,7,25,18,26,4,27},new int[]{-37,40,-13,38,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[40] = new State(-68);
    states[41] = new State(-52);
    states[42] = new State(new int[]{26,34},new int[]{-36,43});
    states[43] = new State(-61);
    states[44] = new State(new int[]{24,-53,19,-53,15,-53,18,-53,10,-53,4,-53,20,-53,12,-53,16,-53,5,-53,6,-53,7,-53,9,-53,25,-53,27,-53,14,-53,17,-53,26,-60});
    states[45] = new State(new int[]{24,47,26,34,19,-54,15,-54,18,-54,10,-54,4,-54,20,-54,12,-54,16,-54,5,-54,6,-54,7,-54,9,-54,25,-54,27,-54,14,-54,17,-54},new int[]{-36,46});
    states[46] = new State(-62);
    states[47] = new State(new int[]{5,23,6,24,7,25,18,26,4,27},new int[]{-35,48,-34,45,-13,52,-31,22,-32,41,-5,42,-33,44});
    states[48] = new State(new int[]{24,49,26,34,19,-58,15,-58,18,-58,10,-58,4,-58,20,-58,12,-58,16,-58,5,-58,6,-58,7,-58,9,-58,25,-58,27,-58,14,-58,17,-58},new int[]{-36,51});
    states[49] = new State(new int[]{4,50});
    states[50] = new State(-57);
    states[51] = new State(-63);
    states[52] = new State(new int[]{24,20});
    states[53] = new State(new int[]{24,49,26,34,19,-55,15,-55,18,-55,10,-55,4,-55,20,-55,12,-55,16,-55,5,-55,6,-55,7,-55,9,-55,25,-55,27,-55,14,-55,17,-55},new int[]{-36,51});
    states[54] = new State(-14);
    states[55] = new State(new int[]{13,58,22,89,19,-18,15,-18,18,-18,10,-18},new int[]{-15,56,-16,57});
    states[56] = new State(-17);
    states[57] = new State(-19);
    states[58] = new State(new int[]{19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26,10,-32},new int[]{-20,59,-23,88,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[59] = new State(new int[]{10,60,19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26},new int[]{-23,61,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[60] = new State(-25);
    states[61] = new State(-34);
    states[62] = new State(-35);
    states[63] = new State(-36);
    states[64] = new State(-39);
    states[65] = new State(new int[]{21,66,28,30,26,34,24,-73,10,-73,19,-73,4,-73,20,-73,12,-73,16,-73,5,-73,6,-73,7,-73,18,-73,9,-73},new int[]{-8,28,-36,29});
    states[66] = new State(new int[]{5,23,6,24,7,25,18,26,4,27},new int[]{-13,67,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[67] = new State(new int[]{24,20,10,-43,19,-43,4,-43,20,-43,12,-43,16,-43,5,-43,6,-43,7,-43,18,-43,9,-43});
    states[68] = new State(-40);
    states[69] = new State(new int[]{5,23,6,24,7,25,18,26,4,27},new int[]{-13,70,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[70] = new State(new int[]{14,71,24,20});
    states[71] = new State(new int[]{19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26,10,-32},new int[]{-20,72,-23,88,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[72] = new State(new int[]{10,73,19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26},new int[]{-23,61,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[73] = new State(-44);
    states[74] = new State(-41);
    states[75] = new State(new int[]{5,23,6,24,7,25,18,26,4,27},new int[]{-13,76,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[76] = new State(new int[]{17,77,24,20});
    states[77] = new State(new int[]{19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26,9,-32,10,-32},new int[]{-20,78,-23,88,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[78] = new State(new int[]{9,81,19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26,10,-46},new int[]{-29,79,-23,61,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[79] = new State(new int[]{10,80});
    states[80] = new State(-45);
    states[81] = new State(new int[]{19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26,10,-32},new int[]{-20,82,-23,88,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[82] = new State(new int[]{19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26,10,-47},new int[]{-23,61,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[83] = new State(-42);
    states[84] = new State(new int[]{5,23,6,24,7,25,18,26,4,27,10,-49,19,-49,20,-49,12,-49,16,-49,9,-49},new int[]{-30,85,-13,86,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[85] = new State(-48);
    states[86] = new State(new int[]{24,20,10,-50,19,-50,4,-50,20,-50,12,-50,16,-50,5,-50,6,-50,7,-50,18,-50,9,-50});
    states[87] = new State(new int[]{24,20,10,-37,19,-37,4,-37,20,-37,12,-37,16,-37,5,-37,6,-37,7,-37,18,-37,9,-37});
    states[88] = new State(-33);
    states[89] = new State(new int[]{5,23,6,24,7,25,18,26,4,27},new int[]{-13,90,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[90] = new State(new int[]{24,20,19,-26,15,-26,18,-26,10,-26});
    states[91] = new State(new int[]{4,92});
    states[92] = new State(new int[]{26,98,23,-21,13,-21,22,-21,19,-21,15,-21,18,-21,10,-21},new int[]{-17,93,-19,97});
    states[93] = new State(new int[]{23,95,13,-23,22,-23,19,-23,15,-23,18,-23,10,-23},new int[]{-18,94});
    states[94] = new State(-20);
    states[95] = new State(new int[]{4,96});
    states[96] = new State(-24);
    states[97] = new State(-22);
    states[98] = new State(new int[]{4,104,27,-28},new int[]{-21,99,-22,101});
    states[99] = new State(new int[]{27,100});
    states[100] = new State(-27);
    states[101] = new State(new int[]{25,102,27,-29});
    states[102] = new State(new int[]{4,104,27,-28},new int[]{-21,103,-22,101});
    states[103] = new State(-30);
    states[104] = new State(new int[]{23,105});
    states[105] = new State(new int[]{4,33},new int[]{-5,106});
    states[106] = new State(-31);
    states[107] = new State(-15);
    states[108] = new State(new int[]{26,98,13,-21},new int[]{-17,109,-19,97});
    states[109] = new State(new int[]{13,110});
    states[110] = new State(new int[]{19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26,10,-32},new int[]{-20,111,-23,88,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[111] = new State(new int[]{10,112,19,16,4,65,20,69,12,75,16,84,5,23,6,24,7,25,18,26},new int[]{-23,61,-10,62,-24,63,-25,64,-26,68,-27,74,-28,83,-13,87,-31,22,-32,41,-5,42,-33,44,-34,45,-35,53});
    states[112] = new State(-38);
    states[113] = new State(new int[]{4,114});
    states[114] = new State(-10);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-4,-3});
    rules[5] = new Rule(-4, new int[]{8,-5,-6,13,-7,10});
    rules[6] = new Rule(-5, new int[]{4,-8});
    rules[7] = new Rule(-8, new int[]{});
    rules[8] = new Rule(-8, new int[]{28,-5,29});
    rules[9] = new Rule(-6, new int[]{});
    rules[10] = new Rule(-6, new int[]{11,4});
    rules[11] = new Rule(-7, new int[]{-9});
    rules[12] = new Rule(-7, new int[]{-9,-7});
    rules[13] = new Rule(-9, new int[]{-10});
    rules[14] = new Rule(-9, new int[]{-11});
    rules[15] = new Rule(-9, new int[]{-12});
    rules[16] = new Rule(-10, new int[]{19,4,23,-13});
    rules[17] = new Rule(-11, new int[]{-14,-15});
    rules[18] = new Rule(-15, new int[]{});
    rules[19] = new Rule(-15, new int[]{-16});
    rules[20] = new Rule(-14, new int[]{15,4,-17,-18});
    rules[21] = new Rule(-17, new int[]{});
    rules[22] = new Rule(-17, new int[]{-19});
    rules[23] = new Rule(-18, new int[]{});
    rules[24] = new Rule(-18, new int[]{23,4});
    rules[25] = new Rule(-16, new int[]{13,-20,10});
    rules[26] = new Rule(-16, new int[]{22,-13});
    rules[27] = new Rule(-19, new int[]{26,-21,27});
    rules[28] = new Rule(-21, new int[]{});
    rules[29] = new Rule(-21, new int[]{-22});
    rules[30] = new Rule(-21, new int[]{-22,25,-21});
    rules[31] = new Rule(-22, new int[]{4,23,-5});
    rules[32] = new Rule(-20, new int[]{});
    rules[33] = new Rule(-20, new int[]{-23});
    rules[34] = new Rule(-20, new int[]{-20,-23});
    rules[35] = new Rule(-23, new int[]{-10});
    rules[36] = new Rule(-23, new int[]{-24});
    rules[37] = new Rule(-23, new int[]{-13});
    rules[38] = new Rule(-12, new int[]{18,-17,13,-20,10});
    rules[39] = new Rule(-24, new int[]{-25});
    rules[40] = new Rule(-24, new int[]{-26});
    rules[41] = new Rule(-24, new int[]{-27});
    rules[42] = new Rule(-24, new int[]{-28});
    rules[43] = new Rule(-25, new int[]{4,21,-13});
    rules[44] = new Rule(-26, new int[]{20,-13,14,-20,10});
    rules[45] = new Rule(-27, new int[]{12,-13,17,-20,-29,10});
    rules[46] = new Rule(-29, new int[]{});
    rules[47] = new Rule(-29, new int[]{9,-20});
    rules[48] = new Rule(-28, new int[]{16,-30});
    rules[49] = new Rule(-30, new int[]{});
    rules[50] = new Rule(-30, new int[]{-13});
    rules[51] = new Rule(-13, new int[]{-31});
    rules[52] = new Rule(-13, new int[]{-32});
    rules[53] = new Rule(-13, new int[]{-33});
    rules[54] = new Rule(-13, new int[]{-34});
    rules[55] = new Rule(-13, new int[]{-35});
    rules[56] = new Rule(-34, new int[]{-13,24,4});
    rules[57] = new Rule(-34, new int[]{-35,24,4});
    rules[58] = new Rule(-35, new int[]{-34,24,-35});
    rules[59] = new Rule(-35, new int[]{-34});
    rules[60] = new Rule(-35, new int[]{-33});
    rules[61] = new Rule(-32, new int[]{-5,-36});
    rules[62] = new Rule(-33, new int[]{-34,-36});
    rules[63] = new Rule(-33, new int[]{-35,-36});
    rules[64] = new Rule(-33, new int[]{4,-36});
    rules[65] = new Rule(-36, new int[]{26,27});
    rules[66] = new Rule(-36, new int[]{26,-37,27});
    rules[67] = new Rule(-37, new int[]{-13});
    rules[68] = new Rule(-37, new int[]{-13,25,-37});
    rules[69] = new Rule(-31, new int[]{5});
    rules[70] = new Rule(-31, new int[]{6});
    rules[71] = new Rule(-31, new int[]{7});
    rules[72] = new Rule(-31, new int[]{18});
    rules[73] = new Rule(-31, new int[]{4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> ClassDeclarations, EOF
#line 64 "Grammar.y"
    { 
        CurrentSemanticValue.ast = new ProgramNode((List<ClassDeclaration>)ValueStack[ValueStack.Depth-2].ast); 
    }
#line default
        break;
      case 3: // ClassDeclarations -> ClassDeclaration
#line 71 "Grammar.y"
    { 
        CurrentSemanticValue.ast = new List<ClassDeclaration> { (ClassDeclaration)ValueStack[ValueStack.Depth-1].ast }; 
    }
#line default
        break;
      case 4: // ClassDeclarations -> ClassDeclaration, ClassDeclarations
#line 75 "Grammar.y"
    { 
        var list = (List<ClassDeclaration>)ValueStack[ValueStack.Depth-1].ast;
        list.Insert(0, (ClassDeclaration)ValueStack[ValueStack.Depth-2].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 5: // ClassDeclaration -> CLASS, ClassName, Extension, IS, ClassBody, END
#line 84 "Grammar.y"
    { 
        var classNameNode = (ClassNameNode)ValueStack[ValueStack.Depth-5].ast;
        CurrentSemanticValue.ast = new ClassDeclaration(classNameNode.Name, classNameNode.GenericParameter, (string)ValueStack[ValueStack.Depth-4].str, (List<MemberDeclaration>)ValueStack[ValueStack.Depth-2].ast);
    }
#line default
        break;
      case 6: // ClassName -> IDENTIFIER, Generic
#line 92 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ClassNameNode((string)ValueStack[ValueStack.Depth-2].str, (string)ValueStack[ValueStack.Depth-1].str);
    }
#line default
        break;
      case 7: // Generic -> /* empty */
#line 99 "Grammar.y"
    {
        CurrentSemanticValue.str = null;
    }
#line default
        break;
      case 8: // Generic -> LBRACKET, ClassName, RBRACKET
#line 103 "Grammar.y"
    {
        CurrentSemanticValue.str = ValueStack[ValueStack.Depth-2].str;
    }
#line default
        break;
      case 9: // Extension -> /* empty */
#line 110 "Grammar.y"
    {
        CurrentSemanticValue.str = null;
    }
#line default
        break;
      case 10: // Extension -> EXTENDS, IDENTIFIER
#line 114 "Grammar.y"
    {
        CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;
    }
#line default
        break;
      case 11: // ClassBody -> MemberDeclaration
#line 121 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<MemberDeclaration> { (MemberDeclaration)ValueStack[ValueStack.Depth-1].ast };
    }
#line default
        break;
      case 12: // ClassBody -> MemberDeclaration, ClassBody
#line 125 "Grammar.y"
    {
        var list = (List<MemberDeclaration>)ValueStack[ValueStack.Depth-1].ast;
        list.Insert(0, (MemberDeclaration)ValueStack[ValueStack.Depth-2].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 13: // MemberDeclaration -> VariableDeclaration
#line 134 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 14: // MemberDeclaration -> MethodDeclaration
#line 138 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 15: // MemberDeclaration -> ConstructorDeclaration
#line 142 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 16: // VariableDeclaration -> VAR, IDENTIFIER, COLON, Expression
#line 149 "Grammar.y"
    {
        CurrentSemanticValue.ast = new VariableDeclaration((string)ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 17: // MethodDeclaration -> MethodHeader, OptionalMethodBody
#line 156 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MethodDeclaration((MethodHeaderNode)ValueStack[ValueStack.Depth-2].ast, (MethodBodyNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 18: // OptionalMethodBody -> /* empty */
#line 163 "Grammar.y"
    {
        CurrentSemanticValue.ast = null;
    }
#line default
        break;
      case 19: // OptionalMethodBody -> MethodBody
#line 167 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 20: // MethodHeader -> METHOD, IDENTIFIER, OptionalParameters, ReturnType
#line 174 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MethodHeaderNode((string)ValueStack[ValueStack.Depth-3].str, (List<ParameterDeclaration>)ValueStack[ValueStack.Depth-2].ast, (string)ValueStack[ValueStack.Depth-1].str);
    }
#line default
        break;
      case 21: // OptionalParameters -> /* empty */
#line 181 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ParameterDeclaration>();
    }
#line default
        break;
      case 22: // OptionalParameters -> Parameters
#line 185 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 23: // ReturnType -> /* empty */
#line 192 "Grammar.y"
    {
        CurrentSemanticValue.str = null;
    }
#line default
        break;
      case 24: // ReturnType -> COLON, IDENTIFIER
#line 196 "Grammar.y"
    {
        CurrentSemanticValue.str = ValueStack[ValueStack.Depth-1].str;
    }
#line default
        break;
      case 25: // MethodBody -> IS, Body, END
#line 203 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-2].ast;
    }
#line default
        break;
      case 26: // MethodBody -> ARROW, Expression
#line 207 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 27: // Parameters -> LPAREN, ParameterDeclarations, RPAREN
#line 214 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-2].ast;
    }
#line default
        break;
      case 28: // ParameterDeclarations -> /* empty */
#line 221 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ParameterDeclaration>();
    }
#line default
        break;
      case 29: // ParameterDeclarations -> ParameterDeclaration
#line 225 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ParameterDeclaration>{ (ParameterDeclaration)ValueStack[ValueStack.Depth-1].ast };
    }
#line default
        break;
      case 30: // ParameterDeclarations -> ParameterDeclaration, COMMA, ParameterDeclarations
#line 229 "Grammar.y"
    {
        var list = (List<ParameterDeclaration>)ValueStack[ValueStack.Depth-1].ast;
        list.Insert(0, (ParameterDeclaration)ValueStack[ValueStack.Depth-3].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 31: // ParameterDeclaration -> IDENTIFIER, COLON, ClassName
#line 238 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ParameterDeclaration((string)ValueStack[ValueStack.Depth-3].str, (ClassNameNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 32: // Body -> /* empty */
#line 245 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MethodBodyNode(new List<BodyElement>());
    }
#line default
        break;
      case 33: // Body -> BodyElement
#line 249 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MethodBodyNode(new List<BodyElement> { (BodyElement)ValueStack[ValueStack.Depth-1].ast });
    }
#line default
        break;
      case 34: // Body -> Body, BodyElement
#line 253 "Grammar.y"
    {
        var body = (MethodBodyNode)ValueStack[ValueStack.Depth-2].ast;
        body.Elements.Add((BodyElement)ValueStack[ValueStack.Depth-1].ast);
        CurrentSemanticValue.ast = body;
    }
#line default
        break;
      case 35: // BodyElement -> VariableDeclaration
#line 262 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 36: // BodyElement -> Statement
#line 266 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 37: // BodyElement -> Expression
#line 270 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ExpressionStatement((ExpressionNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 38: // ConstructorDeclaration -> THIS, OptionalParameters, IS, Body, END
#line 277 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ConstructorDeclaration((List<ParameterDeclaration>)ValueStack[ValueStack.Depth-4].ast, (MethodBodyNode)ValueStack[ValueStack.Depth-2].ast);
    }
#line default
        break;
      case 39: // Statement -> Assignment
#line 284 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 40: // Statement -> WhileLoop
#line 288 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 41: // Statement -> IfStatement
#line 292 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 42: // Statement -> ReturnStatement
#line 296 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 43: // Assignment -> IDENTIFIER, ASSIGN, Expression
#line 303 "Grammar.y"
    {
        CurrentSemanticValue.ast = new Assignment((string)ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 44: // WhileLoop -> WHILE, Expression, LOOP, Body, END
#line 310 "Grammar.y"
    {
        CurrentSemanticValue.ast = new WhileLoop((ExpressionNode)ValueStack[ValueStack.Depth-4].ast, (MethodBodyNode)ValueStack[ValueStack.Depth-2].ast);
    }
#line default
        break;
      case 45: // IfStatement -> IF, Expression, THEN, Body, ElsePart, END
#line 317 "Grammar.y"
    {
        CurrentSemanticValue.ast = new IfStatement((ExpressionNode)ValueStack[ValueStack.Depth-5].ast, (MethodBodyNode)ValueStack[ValueStack.Depth-3].ast, (ElsePart)ValueStack[ValueStack.Depth-2].ast);
    }
#line default
        break;
      case 46: // ElsePart -> /* empty */
#line 324 "Grammar.y"
    {
        CurrentSemanticValue.ast = null;
    }
#line default
        break;
      case 47: // ElsePart -> ELSE, Body
#line 328 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ElsePart((MethodBodyNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 48: // ReturnStatement -> RETURN, ReturningExpression
#line 335 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ReturnStatement((ExpressionNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 49: // ReturningExpression -> /* empty */
#line 342 "Grammar.y"
    {
        CurrentSemanticValue.ast = null;
    }
#line default
        break;
      case 50: // ReturningExpression -> Expression
#line 346 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 51: // Expression -> Primary
#line 353 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 52: // Expression -> ConstructorInvocation
#line 357 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 53: // Expression -> FunctionalCall
#line 361 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 54: // Expression -> MemberAccess
#line 365 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 55: // Expression -> ExpressionDotSequence
#line 369 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 56: // MemberAccess -> Expression, DOT, IDENTIFIER
#line 376 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MemberAccessExpression((ExpressionNode)ValueStack[ValueStack.Depth-3].ast, new IdentifierExpression((string)ValueStack[ValueStack.Depth-1].str));
    }
#line default
        break;
      case 57: // MemberAccess -> ExpressionDotSequence, DOT, IDENTIFIER
#line 380 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MemberAccessExpression((ExpressionNode)ValueStack[ValueStack.Depth-3].ast, new IdentifierExpression((string)ValueStack[ValueStack.Depth-1].str));
    }
#line default
        break;
      case 58: // ExpressionDotSequence -> MemberAccess, DOT, ExpressionDotSequence
#line 387 "Grammar.y"
    {
        CurrentSemanticValue.ast = new MemberAccessExpression((ExpressionNode)ValueStack[ValueStack.Depth-3].ast, (ExpressionNode)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 59: // ExpressionDotSequence -> MemberAccess
#line 391 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 60: // ExpressionDotSequence -> FunctionalCall
#line 395 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-1].ast;
    }
#line default
        break;
      case 61: // ConstructorInvocation -> ClassName, Arguments
#line 402 "Grammar.y"
    {
        var classNameNode = (ClassNameNode)ValueStack[ValueStack.Depth-2].ast;
        CurrentSemanticValue.ast = new ConstructorInvocation(classNameNode.Name, classNameNode.GenericParameter, (List<ExpressionNode>)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 62: // FunctionalCall -> MemberAccess, Arguments
#line 410 "Grammar.y"
    {
        CurrentSemanticValue.ast = new FunctionalCall((ExpressionNode)ValueStack[ValueStack.Depth-2].ast, (List<ExpressionNode>)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 63: // FunctionalCall -> ExpressionDotSequence, Arguments
#line 414 "Grammar.y"
    {
        CurrentSemanticValue.ast = new FunctionalCall((ExpressionNode)ValueStack[ValueStack.Depth-2].ast, (List<ExpressionNode>)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 64: // FunctionalCall -> IDENTIFIER, Arguments
#line 418 "Grammar.y"
    {
        CurrentSemanticValue.ast = new FunctionalCall(new IdentifierExpression((string)ValueStack[ValueStack.Depth-2].str), (List<ExpressionNode>)ValueStack[ValueStack.Depth-1].ast);
    }
#line default
        break;
      case 65: // Arguments -> LPAREN, RPAREN
#line 425 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ExpressionNode>();
    }
#line default
        break;
      case 66: // Arguments -> LPAREN, ExpressionCommaSequence, RPAREN
#line 429 "Grammar.y"
    {
        CurrentSemanticValue.ast = ValueStack[ValueStack.Depth-2].ast;
    }
#line default
        break;
      case 67: // ExpressionCommaSequence -> Expression
#line 436 "Grammar.y"
    {
        CurrentSemanticValue.ast = new List<ExpressionNode>{ (ExpressionNode)ValueStack[ValueStack.Depth-1].ast };
    }
#line default
        break;
      case 68: // ExpressionCommaSequence -> Expression, COMMA, ExpressionCommaSequence
#line 440 "Grammar.y"
    {
        var list = (List<ExpressionNode>)ValueStack[ValueStack.Depth-1].ast;
        list.Insert(0, (ExpressionNode)ValueStack[ValueStack.Depth-3].ast);
        CurrentSemanticValue.ast = list;
    }
#line default
        break;
      case 69: // Primary -> INTEGER_LITERAL
#line 449 "Grammar.y"
    {
        CurrentSemanticValue.ast = new IntegerLiteral((int)ValueStack[ValueStack.Depth-1].integer);
    }
#line default
        break;
      case 70: // Primary -> REAL_LITERAL
#line 453 "Grammar.y"
    {
        CurrentSemanticValue.ast = new RealLiteral((double)ValueStack[ValueStack.Depth-1].real);
    }
#line default
        break;
      case 71: // Primary -> BOOLEAN_LITERAL
#line 457 "Grammar.y"
    {
        CurrentSemanticValue.ast = new BooleanLiteral((bool)ValueStack[ValueStack.Depth-1].boolean);
    }
#line default
        break;
      case 72: // Primary -> THIS
#line 461 "Grammar.y"
    {
        CurrentSemanticValue.ast = new ThisExpression();
    }
#line default
        break;
      case 73: // Primary -> IDENTIFIER
#line 465 "Grammar.y"
    {
        CurrentSemanticValue.ast = new IdentifierExpression((string)ValueStack[ValueStack.Depth-1].str);
    }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 472 "Grammar.y"
#line default
}
}
